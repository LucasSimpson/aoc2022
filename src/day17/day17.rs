use std::{cmp, iter};
use std::collections::{HashMap, HashSet};

#[derive(Debug, Clone, Copy)]
enum Wind {
    Left,
    Right,
}

#[derive(Debug, Clone, Copy)]
enum Shape {
    Flat,
    Plus,
    Ell,
    Vert,
    Square,
}

impl Shape {
    fn offsets(&self) -> std::slice::Iter<(i64, i64)> {
        match self {
            Shape::Flat => [(0, 0), (1, 0), (2, 0), (3, 0)].iter(),
            Shape::Plus => [(0, 1), (1, 1), (2, 1), (1, 0), (1, 2)].iter(),
            Shape::Ell => [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2)].iter(),
            Shape::Vert => [(0, 0), (0, 1), (0, 2), (0, 3)].iter(),
            Shape::Square => [(0, 0), (1, 0), (0, 1), (1, 1)].iter(),
        }
    }

    fn offsets_at<'a>(&'a self, (x, y): &'a (i64, i64)) -> impl Iterator<Item=(i64, i64)> + 'a {
        self.offsets().map(|(i, j)| (i + *x, j + *y))
    }

    fn show(&self) {
        let mut disp: Vec<Vec<bool>> = (0..4).map(|_| {
            iter::repeat(false).take(4).collect::<Vec<bool>>()
        }).collect();

        for (x, y) in self.offsets() {
            disp[*y as usize][*x as usize] = true
        }

        for v in disp.iter().rev() {
            let line: String = v.iter()
                .map(|b| {
                    if *b {
                        '#'
                    } else {
                        '.'
                    }
                }).collect();

            println!("{}", line);
        }
        println!("\n");
    }
}

#[derive(Debug, Clone)]
struct Board {
    rows: Vec<u8>,
    bottom: usize,
    highest: i64,
    shapes: usize,
}

impl Board {
    fn new() -> Board {
        Board{
            rows: Default::default(),
            bottom: 0,
            highest: -1,
            shapes: 0,
        }
    }

    fn is_clear(&self, (x, y): &(i64, i64)) -> bool {
        if *x < 0 || *x > 6 {
            return false
        }
        if *y < self.bottom as i64 {
            return false
        }
        if *y as usize - self.bottom >= self.rows.len() {
            return true
        }
        self.rows[*y as usize - self.bottom] & (1u8 << x) == 0
    }

    fn shape_clear(&self, shape: Shape, pos: &(i64, i64)) -> bool {
        for loc in shape.offsets_at(pos) {
            if !self.is_clear(&loc) {
                return false
            }
        }
        true
    }

    fn set(&mut self, (x, y): &(i64, i64)) {
        if *x >= 0 && *x <= 6 && *y >= self.bottom as i64 {
            let offset = *y as usize - self.bottom;
            if offset >= self.rows.len() {
                for _ in self.rows.len()..offset + 1 {
                    self.rows.push(0);
                }
            }
            self.rows[offset] = self.rows[offset] | (1 << x);
            if *y > self.highest {
                self.highest = *y;
            }
        }
    }

    fn rel_is_clear(&self, x: usize, y: i64) -> bool {
        if y < 0 {
            return false
        }
        if y as usize >= self.rows.len() {
            return true
        }
        self.rows[y as usize] & (1u8 << x) == 0
    }

    fn can_cross(&self, known_failures: &mut HashSet<(usize, i64)>, from: usize, x: usize, y: i64, lowest: i64) -> Option<i64> {
        // we don't want to go below the current bottom
        if lowest <= 0 {
            return None
        }

        // if the current block IS clear, the answer is no
        let is_clear = self.rel_is_clear(x, y);
        if is_clear {
            return None
        }

        // if we're at the edge, we know if we have a path or not
        if x == 6 {
            return if is_clear {
                None
            } else {
                Some(lowest)
            }
        }

        // if we've seen this spot before, then fail fast
        if known_failures.contains(&(x, y)) {
            return None
        }

        // check UP, RIGHT, and DOWN
        if from != 3 {
            if let Some(res) = self.can_cross(known_failures, 1, x, y + 1, lowest) {
                return Some(res)
            }
        }
        if let Some(res) = self.can_cross(known_failures, 2, x + 1, y, lowest) {
            return Some(res)
        }
        if from != 1 {
            if let Some(res) = self.can_cross(known_failures, 3, x, y - 1, cmp::min(lowest, y - 1)) {
                return Some(res)
            }
        }

        // insert our current spot as a known failure
        known_failures.insert((x, y));
        None
    }

    fn find_bottom(&mut self) {
        for (y, _) in self.rows.iter().rev().enumerate() {
            let mut known_failures: HashSet<(usize, i64)> = Default::default();
            if let Some(offset) = self.can_cross(&mut known_failures, 0, 0, y as i64, y as i64) {
                // found new bottom. Drain leading rows and shift
                self.rows.drain(0..offset as usize);
                self.bottom = self.bottom + offset as usize;
                return
            }
        }
    }

    fn set_shape(&mut self, shape: Shape, pos: &(i64, i64)) {
        shape.offsets_at(&pos)
            .for_each(|loc| {
                self.set(&loc)
            });

        self.shapes += 1;
        self.find_bottom();
    }

    fn drop<I>(&mut self, shape: Shape, wind: &mut I) -> usize
        where
            I: Iterator<Item=Wind>
    {
        let mut inc = 0usize;
        let mut pos = (2, self.highest + 4);

        loop {
            // move from wind
            inc += 1;
            let wind_pos = match wind.next().unwrap() {
                Wind::Left => (pos.0 - 1, pos.1),
                Wind::Right => (pos.0 + 1, pos.1),
            };
            if self.shape_clear(shape, &wind_pos) {
                pos = wind_pos;
            }

            // drop down
            let drop_pos = (pos.0, pos.1 - 1);
            if self.shape_clear(shape, &drop_pos) {
                pos = drop_pos;
            } else {
                self.set_shape(shape, &pos);
                return inc
            }
        }
    }

    fn show(&self) {
        println!("|.......|\n|.......|");
        for row in self.rows.iter().rev() {
            let mut line = "".to_owned();
            for j in 0..7 {
                if row & (1 << j) > 0 {
                    line.push('#');
                } else {
                    line.push('.')
                }
            }
            println!("|{}|", line)
        }
        println!("+-------+\nhighest: {}\nbottom: {}\nshapes: {}\n\n", self.highest, self.bottom, self.shapes);
    }
}

fn solve(lines: Vec<String>, num_shapes: usize) -> u64 {
    let shapes_cycle = 5usize;
    let wind_cycle = lines.first().unwrap().len();

    let mut shapes = Vec::from([Shape::Flat, Shape::Plus, Shape::Ell, Shape::Vert, Shape::Square])
        .into_iter()
        .cycle();
        // .take(num_shapes);

    let mut wind = lines.first()
        .unwrap()
        .chars()
        .map(|c| {
            match c {
                '<' => Wind::Left,
                '>' => Wind::Right,
                _ => panic!("invalid wind: {}", c),
            }
        })
        .cycle();

    let mut board = Board::new();

    let mut seen: HashMap<(usize, usize), (usize, i64)> = Default::default();
    let mut shapes_count: usize = 0;
    let mut wind_count: usize = 0;
    let mut total_count: usize = 0;
    let mut skip: usize = 0;
    let mut wait_for: usize = 20; // idk
    for _ in 0..num_shapes {
        shapes_count += 1;
        wind_count += board.drop(shapes.next().unwrap(), &mut wind);
        total_count += 1;

        shapes_count %= shapes_cycle;
        wind_count %= wind_cycle;
        let key = (shapes_count, wind_count);
        if let Some((count, highest)) = seen.remove(&key) {
            wait_for -= 1;
            if wait_for == 0 {
                let h_diff = board.highest - highest;
                let cycle_len = total_count - count;
                let num_cycles = (num_shapes - total_count) / cycle_len;
                let remaining = num_shapes - (total_count + num_cycles * cycle_len);
                skip = num_cycles * h_diff as usize;
                for _ in 0..remaining {
                    board.drop(shapes.next().unwrap(), &mut wind);
                }
                return board.highest as u64 + 1 + skip as u64
            }
        }
        seen.insert(key, (total_count, board.highest));
    }

    board.highest as u64 + 1 + skip as u64
}

pub fn solve_p1(lines: Vec<String>) -> u64 {
    solve(lines, 2022)
}

pub fn solve_p2(lines: Vec<String>) -> u64 {
    solve(lines, 1000000000000)
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::day17::day17::{solve_p1, solve_p2};
    use test::Bencher;

    #[test]
    fn test_solve_p1() {
        let lines: Vec<String> = vec![
            ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>".to_owned(),
        ];
        assert_eq!(solve_p1(lines), 3068)
    }

    #[test]
    fn test_solve_100k() {
        let lines: Vec<String> = vec![
            ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>".to_owned(),
        ];
        assert_eq!(solve(lines, 100_000), 151434)
    }

    #[test]
    fn test_solve_1m() {
        let lines: Vec<String> = vec![
            ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>".to_owned(),
        ];
        assert_eq!(solve(lines, 1_000_000), 1514288)
    }

    #[test]
    fn test_solve_p2() {
        let lines: Vec<String> = vec![
            ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>".to_owned(),
        ];
        assert_eq!(solve_p2(lines), 1514285714288)
    }

    #[test]
    fn test_solve_long_10k() {
        let lines: Vec<String> = vec![
            ">><<<<>><>>>><><<>>>><<<>>>><<<<>>><>>>><<<<>>>><<><><<<><<><<<<><<<<>>>><<>>><<<>><<>>><<><<<>>>><>>><<><>><<>>><<<<><>><<>>><<<<><<<<><>><<<<>>><<<<>>>><<<>><><<<<>>><>><<<>><><<<>>><<<<>>><>>>><<<><<>>>><><<<<>>>><<<>>>><>>>><>>>><><<><<>>>><<<>>><<<>>>><><<<><<<<>><>>><<<<><<<><>><><><<><<><<<<>>>><<<<>>><>>><<<><<<<>>><<<<>>>><<<<>>><>>>><<<><<<<>>><<>><>><>><><>>>><<>>><>>>><<<<>><<<>>>><<>><<<>>>><><<<<><>><>>>><>><<<<>>>><<<>>>><>><>>><><<<<>><><<<><<<<>>><<><<<>>><<<<><<>>><<>><<<<><<>>>><<><>>><<><<<>>><<<<><<<<>><>>><<<>>><<<<>>>><<><<>><<<>><<>>>><<<>>>><<>><<>><<><<<<>><<<<>>><<><<<<>>><>><<>><<<<><<<><<<>>>><<<<>><>>>><<<<>><<>>><<>>>><<<<><<<><<>>><>>><<<>>>><>><<><><<<<>>>><<<<>>>><<<<><<<>>><<>><>>>><>>>><<<<>><<<<><<><>><<<<>><<<>>>><<>>>><<<<><<<>>><<<<>>><<>>><<<>>><<><<><<<>>><><<>>><<<>>>><>>>><<<><<<<><<>><><<>>>><><<<<>>><<><<<<><<<<><<<<>>>><<>><<<><<<>><<>>><<>><<<<><<><<<>>><<>><<<><>><<><<<<><<<<>><<>><<><>>><>>><<<>><<<>>>><>>><>><<><<>><><<<<><<<<>>><<<<>>><<<<><<<>>><<<>>>><<<>><<>><><<><<<<><>>>><>>>><<<<><>>><<<>><<<>>>><<<<>><<<<>><<<<>>>><>><<>>>><<<>>><<><<<>>>><<<><<><<<>>>><<<>>>><<>><<<<>>>><><<<>>><>>>><<<>>>><<>><<<<>>>><><<<>><<<>>><<>>><>>>><<>>><><<<<><>>>><><<<<>>>><<<<>><<<>>>><<<>><<<>><<<>>>><><<<<>>><<>>>><<>><><<<>>><<<>><<<>>>><>>>><<>>><<<<>>><<<>><><<<>>><<<<>>>><<>><<>>>><<<<>>><<<><>>><<<>>>><<<<>><<<<><<<<><<<<>>><<<>>><<<>>>><><>>>><>>><<>>><><>>><<>>><>><><<<>>>><<<>><<<<>>><<>>>><<>>><<<>><<<<>><>>><<<>>>><<<>>><<<>>><><><<<>>><<<>><<<>><<<<>><>>><<><>>><<>>><<>>><<<><>>><<<<>>><<<>>><<<>>><>>><<>><<>>>><><<<<>><>>>><<<<><<><<<<>>><>><>>>><<>>>><<>>>><<<>><>>><><<<<>>><><<>><<<>><<<<><<<><<<<><<<>><<>>>><<<<>>><>>><<<<><<<>><<<>>><<>>>><<<<>>>><<>>><><><<<<>>>><>>>><<<<>>><><<<><<<>>><>>><<<<><<<<><>>>><>>>><<><<<>>>><<>>><>>><<<<>>><<<<><<>>>><<<>>><<<<>>><>><<<><>>>><<>>><<<>><<<<>>>><<<>>><<<<><<<<><<>><>>><>><<<<><>>><>>>><<>><>>><<><<<><<>><<<>><>>><<<<>>>><>>>><<<<>>><<<><<<<>>>><<<<>>><<<<>>>><>>><<<>><<>>>><<<<>>>><<<<><<>>>><<<>><>>><<>><><<<<>><<<<>>><<<><<>>><>><<<><>><<>>><>>>><<>>><>>><>><<<><<>>>><<<<><<>><<<<><<<><<<<>>><<<<>>><<<>><<<<>>><<<<>>>><<><<>>><<<<><<>><<<<><<><<<<>>>><<<><<<<>><<<<><>>>><<><<<<>><>>>><><<<>>>><<<>><<<<>>>><<><<<<>><<>><<<<><<<><<>>><<>><>><<><<><>><<<<>>><<>>><>>><<<><<<<><<>>>><<>>><<>><>>>><><<<<><<>><>>><><<>>><<>>>><<<<>>><<<<>>>><<<>><<<<><<<>>><<<>><<<<><<<><><<>>>><<<>>>><<<>>>><<<>>><<>>>><<>>>><<<<>>><<>>><<<>><<>><<>>>><<<>>>><<<<><<>><>>><<<<>>>><<<><<>><>>>><>>>><>>>><<>><<<><<><>><<<>><<<<>><><<>><<>><<>>><><<<>><>><<><<<<><>>><>><<<>>>><<<>>><>>>><<>><><<>><<>>>><<<<><>>>><<>><<>>><<<>>>><<<<>><<>>><<<<>>>><>>><<<>><<<<>>>><<<<>>><<<>><<>>>><<<><<<<>><<<<>><<><<<>>><<>><<<><<<>>>><<<<>>>><<<<>><<<<>><><<>><<<<>>>><<<<>><<>>>><<>><>>>><<<><>><<><>><<>><><<><>>><<<>>>><>>><<>><>><>>>><<<<><<>><<<<><>>>><<>>><<>>><<><>>>><>><<<><<<><>>>><><<><<<<><<><<<<>>>><><<<<>>>><<<>><<>><<<<>>>><<<<>>>><<<>>>><>>><<<>>>><<<>><<<<>>>><<<>><<>>><<<<>>><<><<<<>>>><>><<<>><<>>>><<<<>>>><<>>><<<<>><><<<<>>><<<>>>><<>>>><><>>>><<>>><>>><<<>>><<<>><<<>><<<<><><<><<<<>><>>><>>><><>>><<<>>><<>><<><<<>>>><<<>>><>><><<>>>><<<><>><<<<>><<<><>>><<><<<<>>>><<>>>><<<<>><<<<>><<<<>>>><<<<>>><<<<><<<>><<>><<<<>><<><<<<>><<<<>>><<<<><<<<>>>><<><<<><<<<>>>><<>>><<<<>>>><<<<><<>>><>>><<<><<<<>><<<>>><>>>><><>>>><><>>><<<>>>><<<><>>>><<<>><<<><<>><<><><<<<><<>>><<>><<><<<>>>><<<>>><>>><>><<<<>>><<><<<<>><>>><<<>>>><<>><>>><<<>>><<<>><<<<>>>><>>><>>>><>>><<<>>><<<>>>><<<>><<<>><<<><><>>>><<<<>>>><<<<><>>><><<<<>>><<<<>>><<><><><<>><<><<<<>>><>>>><<>>><<>>>><<<>>><<<>><<<<><>>><>><<<<><<>><<<<><<<<>>>><<<>>><>>>><<<<>>>><<<<><<<<>>>><<<<>>>><<<>><<<<>>>><<>><<<>>>><<<>>>><<<<>><<<><>>>><<><>>>><<<<><>>><><<<><>>>><<>><<<<>><>><<<<>>>><<<<>><<>>><><<<><<<<>>>><>>>><<>><<<><<>>><<>><>><<>><<><<<<>><>><<<<>>>><<<<>><<<<>>><<><<>><>>><<<<>>>><<>>>><<><<>>>><<>><<>>>><<<>><<<<>>>><>>>><<<<><<<><><<<><<<<>><<<><<>><<<<>><<<<>>><<<><<<>><<>><<<>>><<><<>><<>>><<<>>>><>>><<<>>>><<>>><<<<>>>><><>>><<<<>>>><>>>><<<>>><<>>>><<<>><>><>><<<>>><<<>>>><<<>>><<<>>>><<>>>><<<><>><<>>><<<<>>>><><<<<><<>><>><>>><>>>><<>>><<<<>>><<<<><<<>>>><<<<>>>><<<<>>><>><>><<<<>>><<<<>>>><<>>>><<<<><>><<>>>><>>><<>><<<>>><<<>><<<><<<<>>>><<<<>><<>><<>>>><<<<>>>><>><<>>><<<<><<<><><<<>>><<>>><<<>>><<<>><<>>><>><<<>>>><<>>>><<<<>>>><<>><>>>><<<<><>>><<<<>>>><<>>>><<<<>>><<<<>>><<<<>><<>>><<>>>><<>>><<<><<<>>><<>>>><<<<><<>><<<<>>>><>>>><>><><<><<><<<<>><<<><<>>><>>><>>><<<<><<<<><<<<>>>><<>><>>><>>><<<><>>>><>>><>>><<<>><<<><<<>><<<<>>>><<<>>>><<<>><>><<>><<<>>>><<<<>>>><<<>>><><>><<><<<>><<<<>>><<>><<>><<<<>>><<<>>>><<>>>><<<<>>><<<>>><<<><>>>><<<<>><>><<<<>>>><<>>><<<>><><<<><<<<><>>>><>><><>><<<>>>><<<>>><<>>>><><<<<><<<>><<<<>>><<<><<><<<>><>>><><<<>>>><<<<>>>><<<>><>><<<>><<<>><<><<<<>>>><<>>><<<>>><>>>><<<>><<<<>>><<><>><<<<><<<<>><<<>><><>><<<><<<><><<<<>>>><<<><<<<><<<>>>><<>><<><><>>>><><>>><<>>><<<>><<<><<<<>>>><<<><<>><<<<>>><>><<><<>>>><<<>>><<<><<<>>><><<<<>>>><<><>><>>><<>>><<>>>><<>>><<>>>><>><><<<<>><>>><<<>>><<<>><<>>><<<<>><>>><<>>>><<<>>><>>><<<>><<<><<<>>><<><<<>>>><<>><<<<>>><<<>>><<<>>>><>><<<>>><<<<>>>><<><>>>><>>>><<<<>><<<>>>><>>>><<<>><<<<>><<><<>>>><<<<>>><<<<>>><<>><<<<>><<>>><<>>>><>><<>>><<>>>><>>>><>>><<<><<>><<<<>>>><<<>><<<<>>>><<<>><<<><<<>>><<<>><>>><<<<>>>><>>>><<<>><<<<>>><>>>><>><<><><><<<<>>>><<<<><>>><<>><<<>><<<>><<><<>><>><<<><<<>><<<>>><<<>><<>>><<<>>><<<<><>>><>>>><><<>>>><>>>><<<<>>><>>><<<<>>><>>>><>>>><<<<>>>><<>>>><<<>>><<>><<>>><<>>>><<>><>>>><<<>><<<><<><<<>><<<<>>><<>>>><<<<><>><<<>>>><<<>>>><<>><<>>>><<><>><>>><<<<>><<<>>>><<<>>>><<<<>>>><>>>><>>><<<<>>>><<<<><<>>>><<<<>>><<<<>><<>><>>><<<>><<<><<<<>>><><>><>>>><><<><<<<>>>><><<<>><<>>><<<<>>><<<<><>>><<>><>><<<><><>><<>>><<><><<><>><<>>>><<<<><<>><<<><<<><<>>><<<<><>><>>><<<><<<>><<><<<>><<<<>>>><<<>>><<>>>><><>><>>>><>>><>>>><>>><<<<>>>><<<>>><<<<>>>><>><<<<><<>><>><<>>><<<<>>>><<<>>><<<>><<<>><<>><<<<><>>>><>>>><<>>><<<><>><>><<<<>>><>>>><>><<>>>><<<<>><>>><<>>><<<<>>>><<><<<<>>>><<><<>><><>>>><>>><>>>><>>><<><>>><<>>><<<>>><<<<>>>><>>><<>><>><>>>><<>><<<>>><<<>>>><>><<>>><<>>><<><<>>>><<<<>>>><>><<<<>>>><<<<>>>><<>><<>>>><<<<>>>><<<<>><>>><>>>><<<>><>>>><<<><<>>>><<>>><<>>>><<><<<><<<<><<<>>><<>>><<<>>>><<><<<><><<>><<<<><<<<>>><<><<<<>><<<<>>>><<<>>>><<<>><<<<>>><>>><<<<>>><<<>>><<<<>><<<<>>><<>>><<<>><<<<>>><>>><<<>><<<<><<<<>>><<><<<<>>>><<<>>>><<>>><<><<<>>>><>>>><<>>>><>><<>><<>>>><<<<>>><<<>>>><<><<<><>><<<<>>><><>><<>>><<<>><<<>>><<<<><<<>>><<<<>>><<<<>><<><<<<>>>><<<><>><<>><>>>><>><<>><><<<>><<<>><<<<>>>><<<>>><<><<>>>><<>>>><<>>><<>><<<<>>>><<<<>><<>>>><<<>>>><<<<>>><<><<<<>>>><<<><>>><<<>><><>>>><><<<>>>><<<<>><<>><<<>><<><<><<<<>><><<<<>>><<><<>><<<>>>><<<>>><<>>><<<<>><<><<<<>>><<<<><><<<>>><<<><<<<>>><<<<>>><<<<>>><<<<>>><<>>><<<<>>><>><<<>><<<<>>>><><>>>><<><<><<<<>><><<<>>><><<<><<<>>>><<>><<<<>>><<<<><<<>>>><<>>>><<<<>><<<>>>><>>><<<>>>><<<>>>><<<>>><>>>><<<<>><>><<>><><<<<><<<>>>><<<>>><>>>><>>>><<<><<<>>><<>>>><>>><><<<<>><<>>><<<>><<>>><<<<><<<<>>>><<><<<><>>>><<<>>><<>>>><<<<>>>><<<<>>>><>><<<<>>><>>>><<>>>><<<><<>><<<>>><<<><<>>><<<<>>><<<<><<>>>><<>><<<>>><<<<>><<><<<<>>>><<><<>>><<<>>>><<<><<>><<<>>>><<><<>>>><>><<<<>>>><<>><>><<>>><<<><<<<><<<<>>><>><><>>><<<>>><<>><><<>><<<>>><<<>><<<<>>><<<<><<<><>><>>><<<<>>>><<<<>><<<<>><>>>><>>>><>>>><<<<>><>>>><<>><<<>>><<>><><>>>><<><<<<>><<>>><<>>><<>>><<<<>>>><<<<>><<<>>><<><<<<>><<<<>><<><>>>><<<>>>><<<><<>><<<<>>><<<<><>>>><<<<>>>><<>>>><<>><>>><>>><<><<<<>><<<<>><><<>><>><>>><<><<<>>>><<<>>><<<<>>>><<><<><>>><<<<><><<>>>><<<<>><<<<>><<>><<>>>><<>>>><<>>><<<>>>><<>>>><<<<>><>><>><<>>>><<<>>>><<<<>><<<>>><<>>><<<<>>>><>>>><<>>><<>>>><<<<><<>>><<<<>><<<>>>><><<<>>>><<<>>><<<<>>><<<<><<><<><<<<>>><<<>><>>><>><<<<>>><<<<>>><<><<<<>>><>>><<<>>><<>>>><<<>><<>>>><<><<<>><<<>>><<<<>>>><<<<>>>><>>><<>>><<<><<<>>>><<>>>><<><<<><>>><<>><<><<<<>>><>><>>><<<><><<><<<>>><<<><><<>>><<><<>><>>>><>><<<>>><<<>>>><<<>><<<<>>><>>>><<<<>><<<<><<<<><<<><>><<<<><<>>><<<<>>>><<<>>><<<>>>><>>>><<<<><<<<><<<<><<>><><<<<>>>><<<<>><<<>>>><<<>><<<>>>><<<>>>><<<><<>>><>><<<>>><<>><<<>>><>><<<>>><<<<>><>>>><>>>><><>>>><<<>>>><<<<><<><<><>><>>>><><<>><<<>>><<<<><>><<>><>>>><><<<>>>><<<>>>><<>>>><>>><>>>><<<>>><>><<<<><<<<>>>><<<<>><<<>>><<>>><<<<>>><<<>><>>><<><<<><<>>><<>><<>>><<<<>>><<<>>>><<<<><<<<>>>><<<>>>><<<<>>>><<><>><<<><><<>>>><><<<>>><<>>><<>>>><<<<>>><<<>>><<<<>>>><<>>><<<>><>>>><<>><<<><<><<<>><<<<>>><><>>>><><<><><<>>>><<>>>><>><><>>>><<<><<<<>>>><<<>><<<>><<<>>><<<>><<<>>><<<><<<>>>><<<<><<>><<<>>><<<<>>>><<<<>><<<<>>>><>>><<><<>>><><<<>><<><<<<>>><<<<>>><<<<>><<<>>><<<<><>><<>>><<<<>>><<<>><<<>><<<>>><><<<>><<>>><>><>><<>>><<<>>>><<<>>>><<>>><>><>><<>>><<>>>><<>>><><<<>><<>>><<>><<>><<<<>>>><>>>><<>><<<><<>><<<<>>>><<<<>><<>><>><<<>><<<<><<><<>>>><<>>>><<<>><<<<>>><<<<><<<>><<<>><>>>><>>>><<><>>>><<<>>><<<<>>><<<>><<<<>>><<<><<<>>><>>><<<<>><<>>>><<>><<<>><<<>>>><<<<>><<>>><<<<>><<>>>><<><<<>>><<<<>><>>>><<<<>>>><>>>><>>><<<>>><<<>>><>><>>>><<<<>>><<<<>>><<>>><>>><><<<>><<<<>>>><>>>><<<>><>>>><<>>>><<<><<>>><<<<>>>><<><>>><<<<>><<<>>><>>><<>>><<<><>>><<><<<>>>><<<<>><>>>><<><<>><>>><<>><>>>><<<<>>>><<<<>>><<>><<><><<<<>>>><<>>><<<>>>><<<>>><<<<>><<<<>><<>>>><<<<><<>>><<<><<<>><<<<>>><<<<>><<<>>><<><<>><<<<>>><<<<>>><<><>>><<<><<<<>>>><<<<>>>><>><>>><<<>>>><<<><<>>><<>><<<<>>><<<<><<<><<<>>><<>><>><>>>><>>>><><<<><><<<<><>>>><<>>><>>>><<>>><<<<>>>><<>>><>>>><<<>><><<>>>><<>>><<<>>><<<><<<>><<<>>><<<>>><<><<>><<<>>><<<<>>><<>>><>>><<<<>>><<>>>><<<><<<<>>><>><<<<>><>>><<>><>>>><<><<<<>>><<<<>><<>>><<<>>>><<<<>>><<<>><>>>><<<<>>><>>>><<>><>>><><>>><>>>><<<<>><<<><><<>><>><<<><<>>><<>>><<>><<<>>><<<<>><>><<<>><<<<>>>><<>>><>><<<<>>><<<><<>><>>>><<><<>>><<<>><><<<>>>><<<<><<<<>>>><<<>>><<<><>>><<<>>><<<<>><<<><<>>>><<<<>>>><<>><><<>>><<<<>>><>><<<<>>><>>>><>>><<<<>>><<><<<>>>><<<><<<>>><<<<>>><<<>>>><<<>><>><<<<>>>><<<<>><<<><>><<<><<>>>><<<>><<<<>>><<<<>>>><>><<<>>><<>>><<><<>><<<<>><<<<>><>><<<>>>><<<>>><<<>>><<>>>><<>>>><<>><<>><<>><<>><<>><<><>><>>><<<>>><<><<<<>>>><><<<>><<<<>>>><>><>>>><<><<<><>>".to_owned(),
        ];
        assert_eq!(solve(lines, 10_000), 15488)
    }
    #[test]
    fn test_solve_long_100k() {
        let lines: Vec<String> = vec![
            ">><<<<>><>>>><><<>>>><<<>>>><<<<>>><>>>><<<<>>>><<><><<<><<><<<<><<<<>>>><<>>><<<>><<>>><<><<<>>>><>>><<><>><<>>><<<<><>><<>>><<<<><<<<><>><<<<>>><<<<>>>><<<>><><<<<>>><>><<<>><><<<>>><<<<>>><>>>><<<><<>>>><><<<<>>>><<<>>>><>>>><>>>><><<><<>>>><<<>>><<<>>>><><<<><<<<>><>>><<<<><<<><>><><><<><<><<<<>>>><<<<>>><>>><<<><<<<>>><<<<>>>><<<<>>><>>>><<<><<<<>>><<>><>><>><><>>>><<>>><>>>><<<<>><<<>>>><<>><<<>>>><><<<<><>><>>>><>><<<<>>>><<<>>>><>><>>><><<<<>><><<<><<<<>>><<><<<>>><<<<><<>>><<>><<<<><<>>>><<><>>><<><<<>>><<<<><<<<>><>>><<<>>><<<<>>>><<><<>><<<>><<>>>><<<>>>><<>><<>><<><<<<>><<<<>>><<><<<<>>><>><<>><<<<><<<><<<>>>><<<<>><>>>><<<<>><<>>><<>>>><<<<><<<><<>>><>>><<<>>>><>><<><><<<<>>>><<<<>>>><<<<><<<>>><<>><>>>><>>>><<<<>><<<<><<><>><<<<>><<<>>>><<>>>><<<<><<<>>><<<<>>><<>>><<<>>><<><<><<<>>><><<>>><<<>>>><>>>><<<><<<<><<>><><<>>>><><<<<>>><<><<<<><<<<><<<<>>>><<>><<<><<<>><<>>><<>><<<<><<><<<>>><<>><<<><>><<><<<<><<<<>><<>><<><>>><>>><<<>><<<>>>><>>><>><<><<>><><<<<><<<<>>><<<<>>><<<<><<<>>><<<>>>><<<>><<>><><<><<<<><>>>><>>>><<<<><>>><<<>><<<>>>><<<<>><<<<>><<<<>>>><>><<>>>><<<>>><<><<<>>>><<<><<><<<>>>><<<>>>><<>><<<<>>>><><<<>>><>>>><<<>>>><<>><<<<>>>><><<<>><<<>>><<>>><>>>><<>>><><<<<><>>>><><<<<>>>><<<<>><<<>>>><<<>><<<>><<<>>>><><<<<>>><<>>>><<>><><<<>>><<<>><<<>>>><>>>><<>>><<<<>>><<<>><><<<>>><<<<>>>><<>><<>>>><<<<>>><<<><>>><<<>>>><<<<>><<<<><<<<><<<<>>><<<>>><<<>>>><><>>>><>>><<>>><><>>><<>>><>><><<<>>>><<<>><<<<>>><<>>>><<>>><<<>><<<<>><>>><<<>>>><<<>>><<<>>><><><<<>>><<<>><<<>><<<<>><>>><<><>>><<>>><<>>><<<><>>><<<<>>><<<>>><<<>>><>>><<>><<>>>><><<<<>><>>>><<<<><<><<<<>>><>><>>>><<>>>><<>>>><<<>><>>><><<<<>>><><<>><<<>><<<<><<<><<<<><<<>><<>>>><<<<>>><>>><<<<><<<>><<<>>><<>>>><<<<>>>><<>>><><><<<<>>>><>>>><<<<>>><><<<><<<>>><>>><<<<><<<<><>>>><>>>><<><<<>>>><<>>><>>><<<<>>><<<<><<>>>><<<>>><<<<>>><>><<<><>>>><<>>><<<>><<<<>>>><<<>>><<<<><<<<><<>><>>><>><<<<><>>><>>>><<>><>>><<><<<><<>><<<>><>>><<<<>>>><>>>><<<<>>><<<><<<<>>>><<<<>>><<<<>>>><>>><<<>><<>>>><<<<>>>><<<<><<>>>><<<>><>>><<>><><<<<>><<<<>>><<<><<>>><>><<<><>><<>>><>>>><<>>><>>><>><<<><<>>>><<<<><<>><<<<><<<><<<<>>><<<<>>><<<>><<<<>>><<<<>>>><<><<>>><<<<><<>><<<<><<><<<<>>>><<<><<<<>><<<<><>>>><<><<<<>><>>>><><<<>>>><<<>><<<<>>>><<><<<<>><<>><<<<><<<><<>>><<>><>><<><<><>><<<<>>><<>>><>>><<<><<<<><<>>>><<>>><<>><>>>><><<<<><<>><>>><><<>>><<>>>><<<<>>><<<<>>>><<<>><<<<><<<>>><<<>><<<<><<<><><<>>>><<<>>>><<<>>>><<<>>><<>>>><<>>>><<<<>>><<>>><<<>><<>><<>>>><<<>>>><<<<><<>><>>><<<<>>>><<<><<>><>>>><>>>><>>>><<>><<<><<><>><<<>><<<<>><><<>><<>><<>>><><<<>><>><<><<<<><>>><>><<<>>>><<<>>><>>>><<>><><<>><<>>>><<<<><>>>><<>><<>>><<<>>>><<<<>><<>>><<<<>>>><>>><<<>><<<<>>>><<<<>>><<<>><<>>>><<<><<<<>><<<<>><<><<<>>><<>><<<><<<>>>><<<<>>>><<<<>><<<<>><><<>><<<<>>>><<<<>><<>>>><<>><>>>><<<><>><<><>><<>><><<><>>><<<>>>><>>><<>><>><>>>><<<<><<>><<<<><>>>><<>>><<>>><<><>>>><>><<<><<<><>>>><><<><<<<><<><<<<>>>><><<<<>>>><<<>><<>><<<<>>>><<<<>>>><<<>>>><>>><<<>>>><<<>><<<<>>>><<<>><<>>><<<<>>><<><<<<>>>><>><<<>><<>>>><<<<>>>><<>>><<<<>><><<<<>>><<<>>>><<>>>><><>>>><<>>><>>><<<>>><<<>><<<>><<<<><><<><<<<>><>>><>>><><>>><<<>>><<>><<><<<>>>><<<>>><>><><<>>>><<<><>><<<<>><<<><>>><<><<<<>>>><<>>>><<<<>><<<<>><<<<>>>><<<<>>><<<<><<<>><<>><<<<>><<><<<<>><<<<>>><<<<><<<<>>>><<><<<><<<<>>>><<>>><<<<>>>><<<<><<>>><>>><<<><<<<>><<<>>><>>>><><>>>><><>>><<<>>>><<<><>>>><<<>><<<><<>><<><><<<<><<>>><<>><<><<<>>>><<<>>><>>><>><<<<>>><<><<<<>><>>><<<>>>><<>><>>><<<>>><<<>><<<<>>>><>>><>>>><>>><<<>>><<<>>>><<<>><<<>><<<><><>>>><<<<>>>><<<<><>>><><<<<>>><<<<>>><<><><><<>><<><<<<>>><>>>><<>>><<>>>><<<>>><<<>><<<<><>>><>><<<<><<>><<<<><<<<>>>><<<>>><>>>><<<<>>>><<<<><<<<>>>><<<<>>>><<<>><<<<>>>><<>><<<>>>><<<>>>><<<<>><<<><>>>><<><>>>><<<<><>>><><<<><>>>><<>><<<<>><>><<<<>>>><<<<>><<>>><><<<><<<<>>>><>>>><<>><<<><<>>><<>><>><<>><<><<<<>><>><<<<>>>><<<<>><<<<>>><<><<>><>>><<<<>>>><<>>>><<><<>>>><<>><<>>>><<<>><<<<>>>><>>>><<<<><<<><><<<><<<<>><<<><<>><<<<>><<<<>>><<<><<<>><<>><<<>>><<><<>><<>>><<<>>>><>>><<<>>>><<>>><<<<>>>><><>>><<<<>>>><>>>><<<>>><<>>>><<<>><>><>><<<>>><<<>>>><<<>>><<<>>>><<>>>><<<><>><<>>><<<<>>>><><<<<><<>><>><>>><>>>><<>>><<<<>>><<<<><<<>>>><<<<>>>><<<<>>><>><>><<<<>>><<<<>>>><<>>>><<<<><>><<>>>><>>><<>><<<>>><<<>><<<><<<<>>>><<<<>><<>><<>>>><<<<>>>><>><<>>><<<<><<<><><<<>>><<>>><<<>>><<<>><<>>><>><<<>>>><<>>>><<<<>>>><<>><>>>><<<<><>>><<<<>>>><<>>>><<<<>>><<<<>>><<<<>><<>>><<>>>><<>>><<<><<<>>><<>>>><<<<><<>><<<<>>>><>>>><>><><<><<><<<<>><<<><<>>><>>><>>><<<<><<<<><<<<>>>><<>><>>><>>><<<><>>>><>>><>>><<<>><<<><<<>><<<<>>>><<<>>>><<<>><>><<>><<<>>>><<<<>>>><<<>>><><>><<><<<>><<<<>>><<>><<>><<<<>>><<<>>>><<>>>><<<<>>><<<>>><<<><>>>><<<<>><>><<<<>>>><<>>><<<>><><<<><<<<><>>>><>><><>><<<>>>><<<>>><<>>>><><<<<><<<>><<<<>>><<<><<><<<>><>>><><<<>>>><<<<>>>><<<>><>><<<>><<<>><<><<<<>>>><<>>><<<>>><>>>><<<>><<<<>>><<><>><<<<><<<<>><<<>><><>><<<><<<><><<<<>>>><<<><<<<><<<>>>><<>><<><><>>>><><>>><<>>><<<>><<<><<<<>>>><<<><<>><<<<>>><>><<><<>>>><<<>>><<<><<<>>><><<<<>>>><<><>><>>><<>>><<>>>><<>>><<>>>><>><><<<<>><>>><<<>>><<<>><<>>><<<<>><>>><<>>>><<<>>><>>><<<>><<<><<<>>><<><<<>>>><<>><<<<>>><<<>>><<<>>>><>><<<>>><<<<>>>><<><>>>><>>>><<<<>><<<>>>><>>>><<<>><<<<>><<><<>>>><<<<>>><<<<>>><<>><<<<>><<>>><<>>>><>><<>>><<>>>><>>>><>>><<<><<>><<<<>>>><<<>><<<<>>>><<<>><<<><<<>>><<<>><>>><<<<>>>><>>>><<<>><<<<>>><>>>><>><<><><><<<<>>>><<<<><>>><<>><<<>><<<>><<><<>><>><<<><<<>><<<>>><<<>><<>>><<<>>><<<<><>>><>>>><><<>>>><>>>><<<<>>><>>><<<<>>><>>>><>>>><<<<>>>><<>>>><<<>>><<>><<>>><<>>>><<>><>>>><<<>><<<><<><<<>><<<<>>><<>>>><<<<><>><<<>>>><<<>>>><<>><<>>>><<><>><>>><<<<>><<<>>>><<<>>>><<<<>>>><>>>><>>><<<<>>>><<<<><<>>>><<<<>>><<<<>><<>><>>><<<>><<<><<<<>>><><>><>>>><><<><<<<>>>><><<<>><<>>><<<<>>><<<<><>>><<>><>><<<><><>><<>>><<><><<><>><<>>>><<<<><<>><<<><<<><<>>><<<<><>><>>><<<><<<>><<><<<>><<<<>>>><<<>>><<>>>><><>><>>>><>>><>>>><>>><<<<>>>><<<>>><<<<>>>><>><<<<><<>><>><<>>><<<<>>>><<<>>><<<>><<<>><<>><<<<><>>>><>>>><<>>><<<><>><>><<<<>>><>>>><>><<>>>><<<<>><>>><<>>><<<<>>>><<><<<<>>>><<><<>><><>>>><>>><>>>><>>><<><>>><<>>><<<>>><<<<>>>><>>><<>><>><>>>><<>><<<>>><<<>>>><>><<>>><<>>><<><<>>>><<<<>>>><>><<<<>>>><<<<>>>><<>><<>>>><<<<>>>><<<<>><>>><>>>><<<>><>>>><<<><<>>>><<>>><<>>>><<><<<><<<<><<<>>><<>>><<<>>>><<><<<><><<>><<<<><<<<>>><<><<<<>><<<<>>>><<<>>>><<<>><<<<>>><>>><<<<>>><<<>>><<<<>><<<<>>><<>>><<<>><<<<>>><>>><<<>><<<<><<<<>>><<><<<<>>>><<<>>>><<>>><<><<<>>>><>>>><<>>>><>><<>><<>>>><<<<>>><<<>>>><<><<<><>><<<<>>><><>><<>>><<<>><<<>>><<<<><<<>>><<<<>>><<<<>><<><<<<>>>><<<><>><<>><>>>><>><<>><><<<>><<<>><<<<>>>><<<>>><<><<>>>><<>>>><<>>><<>><<<<>>>><<<<>><<>>>><<<>>>><<<<>>><<><<<<>>>><<<><>>><<<>><><>>>><><<<>>>><<<<>><<>><<<>><<><<><<<<>><><<<<>>><<><<>><<<>>>><<<>>><<>>><<<<>><<><<<<>>><<<<><><<<>>><<<><<<<>>><<<<>>><<<<>>><<<<>>><<>>><<<<>>><>><<<>><<<<>>>><><>>>><<><<><<<<>><><<<>>><><<<><<<>>>><<>><<<<>>><<<<><<<>>>><<>>>><<<<>><<<>>>><>>><<<>>>><<<>>>><<<>>><>>>><<<<>><>><<>><><<<<><<<>>>><<<>>><>>>><>>>><<<><<<>>><<>>>><>>><><<<<>><<>>><<<>><<>>><<<<><<<<>>>><<><<<><>>>><<<>>><<>>>><<<<>>>><<<<>>>><>><<<<>>><>>>><<>>>><<<><<>><<<>>><<<><<>>><<<<>>><<<<><<>>>><<>><<<>>><<<<>><<><<<<>>>><<><<>>><<<>>>><<<><<>><<<>>>><<><<>>>><>><<<<>>>><<>><>><<>>><<<><<<<><<<<>>><>><><>>><<<>>><<>><><<>><<<>>><<<>><<<<>>><<<<><<<><>><>>><<<<>>>><<<<>><<<<>><>>>><>>>><>>>><<<<>><>>>><<>><<<>>><<>><><>>>><<><<<<>><<>>><<>>><<>>><<<<>>>><<<<>><<<>>><<><<<<>><<<<>><<><>>>><<<>>>><<<><<>><<<<>>><<<<><>>>><<<<>>>><<>>>><<>><>>><>>><<><<<<>><<<<>><><<>><>><>>><<><<<>>>><<<>>><<<<>>>><<><<><>>><<<<><><<>>>><<<<>><<<<>><<>><<>>>><<>>>><<>>><<<>>>><<>>>><<<<>><>><>><<>>>><<<>>>><<<<>><<<>>><<>>><<<<>>>><>>>><<>>><<>>>><<<<><<>>><<<<>><<<>>>><><<<>>>><<<>>><<<<>>><<<<><<><<><<<<>>><<<>><>>><>><<<<>>><<<<>>><<><<<<>>><>>><<<>>><<>>>><<<>><<>>>><<><<<>><<<>>><<<<>>>><<<<>>>><>>><<>>><<<><<<>>>><<>>>><<><<<><>>><<>><<><<<<>>><>><>>><<<><><<><<<>>><<<><><<>>><<><<>><>>>><>><<<>>><<<>>>><<<>><<<<>>><>>>><<<<>><<<<><<<<><<<><>><<<<><<>>><<<<>>>><<<>>><<<>>>><>>>><<<<><<<<><<<<><<>><><<<<>>>><<<<>><<<>>>><<<>><<<>>>><<<>>>><<<><<>>><>><<<>>><<>><<<>>><>><<<>>><<<<>><>>>><>>>><><>>>><<<>>>><<<<><<><<><>><>>>><><<>><<<>>><<<<><>><<>><>>>><><<<>>>><<<>>>><<>>>><>>><>>>><<<>>><>><<<<><<<<>>>><<<<>><<<>>><<>>><<<<>>><<<>><>>><<><<<><<>>><<>><<>>><<<<>>><<<>>>><<<<><<<<>>>><<<>>>><<<<>>>><<><>><<<><><<>>>><><<<>>><<>>><<>>>><<<<>>><<<>>><<<<>>>><<>>><<<>><>>>><<>><<<><<><<<>><<<<>>><><>>>><><<><><<>>>><<>>>><>><><>>>><<<><<<<>>>><<<>><<<>><<<>>><<<>><<<>>><<<><<<>>>><<<<><<>><<<>>><<<<>>>><<<<>><<<<>>>><>>><<><<>>><><<<>><<><<<<>>><<<<>>><<<<>><<<>>><<<<><>><<>>><<<<>>><<<>><<<>><<<>>><><<<>><<>>><>><>><<>>><<<>>>><<<>>>><<>>><>><>><<>>><<>>>><<>>><><<<>><<>>><<>><<>><<<<>>>><>>>><<>><<<><<>><<<<>>>><<<<>><<>><>><<<>><<<<><<><<>>>><<>>>><<<>><<<<>>><<<<><<<>><<<>><>>>><>>>><<><>>>><<<>>><<<<>>><<<>><<<<>>><<<><<<>>><>>><<<<>><<>>>><<>><<<>><<<>>>><<<<>><<>>><<<<>><<>>>><<><<<>>><<<<>><>>>><<<<>>>><>>>><>>><<<>>><<<>>><>><>>>><<<<>>><<<<>>><<>>><>>><><<<>><<<<>>>><>>>><<<>><>>>><<>>>><<<><<>>><<<<>>>><<><>>><<<<>><<<>>><>>><<>>><<<><>>><<><<<>>>><<<<>><>>>><<><<>><>>><<>><>>>><<<<>>>><<<<>>><<>><<><><<<<>>>><<>>><<<>>>><<<>>><<<<>><<<<>><<>>>><<<<><<>>><<<><<<>><<<<>>><<<<>><<<>>><<><<>><<<<>>><<<<>>><<><>>><<<><<<<>>>><<<<>>>><>><>>><<<>>>><<<><<>>><<>><<<<>>><<<<><<<><<<>>><<>><>><>>>><>>>><><<<><><<<<><>>>><<>>><>>>><<>>><<<<>>>><<>>><>>>><<<>><><<>>>><<>>><<<>>><<<><<<>><<<>>><<<>>><<><<>><<<>>><<<<>>><<>>><>>><<<<>>><<>>>><<<><<<<>>><>><<<<>><>>><<>><>>>><<><<<<>>><<<<>><<>>><<<>>>><<<<>>><<<>><>>>><<<<>>><>>>><<>><>>><><>>><>>>><<<<>><<<><><<>><>><<<><<>>><<>>><<>><<<>>><<<<>><>><<<>><<<<>>>><<>>><>><<<<>>><<<><<>><>>>><<><<>>><<<>><><<<>>>><<<<><<<<>>>><<<>>><<<><>>><<<>>><<<<>><<<><<>>>><<<<>>>><<>><><<>>><<<<>>><>><<<<>>><>>>><>>><<<<>>><<><<<>>>><<<><<<>>><<<<>>><<<>>>><<<>><>><<<<>>>><<<<>><<<><>><<<><<>>>><<<>><<<<>>><<<<>>>><>><<<>>><<>>><<><<>><<<<>><<<<>><>><<<>>>><<<>>><<<>>><<>>>><<>>>><<>><<>><<>><<>><<>><<><>><>>><<<>>><<><<<<>>>><><<<>><<<<>>>><>><>>>><<><<<><>>".to_owned(),
        ];
        assert_eq!(solve(lines, 100_000), 154818)
    }
}

